/*
题目
看病要排队这个是地球人都知道的常识。
不过经过细心的0068的观察，他发现了医院里排队还是有讲究的。0068所去的医院有三个医生（汗，这么少）同时看病。而看病的人病情有轻重，所以不能根据简单的先来先服务的原则。所以医院对每种病情规定了10种不同的优先级。级别为10的优先权最高，级别为1的优先权最低。医生在看病时，则会在他的队伍里面选择一个优先权最高的人进行诊治。如果遇到两个优先权一样的病人的话，则选择最早来排队的病人。

现在就请你帮助医院模拟这个看病过程。

Input
输入数据包含多组测试，请处理到文件结束。
每组数据第一行有一个正整数N(0<N<2000)表示发生事件的数目。
接下来有N行分别表示发生的事件。
一共有两种事件：
1:“IN A B”,表示有一个拥有优先级B的病人要求医生A诊治。(0<A<=3,0<B<=10)
2:“OUT A”,表示医生A进行了一次诊治，诊治完毕后，病人出院。(0<A<=3)

Output
对于每个"OUT A"事件，请在一行里面输出被诊治人的编号ID。如果该事件时无病人需要诊治，则输出"EMPTY"。
诊治人的编号ID的定义为：在一组测试中，"IN A B"事件发生第K次时，进来的病人ID即为K。从1开始编号。

Sample Input
7
IN 1 1
IN 1 2
OUT 1
OUT 2
IN 2 1
OUT 2
OUT 1
2
IN 1 1
OUT 1

Sample Output
2
EMPTY
3
1
1
*/

//此题设计内容为优先队列

#include <queue>
#include <iostream>
using namespace std;
struct sq {
	int num, id;//记录一下病人的ID
};
bool operator<(const sq& x, const sq& y) {//重载小于号运算符
	if (x.num == y.num) {
		return x.id > y.id;
	}
	else {
		return x.num < y.num;
	}
}
//在此程序中，num越小的优先级越高
//在优先队列中，插入的元素会自动根据其 num 值进行排序，优先级较高的元素会被放在队列的前面。
//num是优先级，id是编号
int main() {
	int n;
	while (cin >> n) {
		int d, k = 1;
		priority_queue<sq>s[4];
		while (n--) {
			string a;
			sq custom;
			cin >> a >> d;
			if (a == "IN") {
				custom.id = k;
				k++;
				cin >> custom.num;//优先级输入
				s[d].push(custom);
				//将一个病人对象 custom 插入到一个优先队列 s[d] 中。在这个程序中，一个病人对象包含了该病人的病情等级 num 和病人编号 id。
			}
			else if(a=="OUT") {
				if (s[d].empty()) {
					cout << "EMPTY" << endl;//为空情况
				}
				else {
					custom = s[d].top();//重新调出
					s[d].pop();
					cout << custom.id << endl;//输出病人编号
				}
			}
		}

	}
}